// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encryption.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Encryption.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EncryptionRoot

@implementation EncryptionRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - EncryptionRoot_FileDescriptor

static GPBFileDescriptor *EncryptionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - DataMessage

@implementation DataMessage

@dynamic hasRecipient, recipient;
@dynamic hasSender, sender;
@dynamic hasBody, body;
@dynamic hasAttachment, attachment;

typedef struct DataMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *recipient;
  NSString *sender;
  NSString *body;
} DataMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recipient",
        .dataTypeSpecific.className = NULL,
        .number = DataMessage_FieldNumber_Recipient,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DataMessage__storage_, recipient),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sender",
        .dataTypeSpecific.className = NULL,
        .number = DataMessage_FieldNumber_Sender,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DataMessage__storage_, sender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = DataMessage_FieldNumber_Body,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DataMessage__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachment",
        .dataTypeSpecific.className = NULL,
        .number = DataMessage_FieldNumber_Attachment,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DataMessage class]
                                     rootClass:[EncryptionRoot class]
                                          file:EncryptionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DataMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DataMessage_Type

GPBEnumDescriptor *DataMessage_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Somessagetypetext\000Somessagetypephoto\000Som"
        "essagetypevideo\000";
    static const int32_t values[] = {
        DataMessage_Type_Somessagetypetext,
        DataMessage_Type_Somessagetypephoto,
        DataMessage_Type_Somessagetypevideo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DataMessage_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DataMessage_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DataMessage_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case DataMessage_Type_Somessagetypetext:
    case DataMessage_Type_Somessagetypephoto:
    case DataMessage_Type_Somessagetypevideo:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
